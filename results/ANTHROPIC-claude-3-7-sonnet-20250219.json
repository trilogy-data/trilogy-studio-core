{
  "provider": "ANTHROPIC",
  "model": "claude-3-7-sonnet-20250219",
  "results": [
    {
      "testId": "test-basic-query",
      "passed": false,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nwhere names.state in ('AL', 'AR', 'FL', 'GA', 'KY', 'LA', 'MS', 'NC', 'SC', 'TN', 'TX', 'VA', 'WV')\nand names.year between 1980 and 1989\nselect\n  names.name,\n  names.gender,\n  count(names.state) as states_appeared_in,\n  sum(names.births) as total_births,\n  rank names.name over names.gender by total_births desc as popularity_rank,\n  rank names.name over names.gender by total_births asc as uniqueness_rank\nhaving\n  (popularity_rank <= 20 or uniqueness_rank <= 20)\norder by\n  names.gender asc popularity_rank asc uniqueness_rank asc\nlimit 100\n",
      "latency": 16288
    },
    {
      "testId": "test-basic-query",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nwhere names.year between 1980 and 1989\n  and names.state in ('AL', 'AR', 'DE', 'FL', 'GA', 'KY', 'LA', 'MD', 'MS', 'NC', 'OK', 'SC', 'TN', 'TX', 'VA', 'WV')\nselect\n  names.name,\n  names.gender,\n  sum(names.births) as total_births,\n  count(names.state) as states_appeared_in,\n  rank names.name by total_births desc as popularity_rank\norder by\n  total_births asc, names.name asc\nlimit 100;\n",
      "latency": 7951
    },
    {
      "testId": "test-basic-query",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nwhere names.state in ('AL', 'AR', 'FL', 'GA', 'KY', 'LA', 'MS', 'NC', 'SC', 'TN', 'TX', 'VA')\n  and names.year between 1980 and 1989\nselect\n  names.name,\n  sum(names.births) as total_births,\n  sum(names.births ? names.gender = 'M') as male_births,\n  sum(names.births ? names.gender = 'F') as female_births,\n  count(names.state) as states_appeared_in,\n  count(names.year) as years_appeared_in,\n  rank names.name by total_births desc as popularity_rank,\n  rank names.name by total_births asc as uniqueness_rank\nhaving\n  total_births > 0\norder by\n  popularity_rank asc, uniqueness_rank asc\nlimit 100\n",
      "latency": 22494
    },
    {
      "testId": "test-basic-query",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nwhere names.state in ('AL', 'AR', 'FL', 'GA', 'KY', 'LA', 'MS', 'NC', 'SC', 'TN', 'TX', 'VA')\nand names.year between 1980 and 1989\nselect\n  names.name,\n  names.gender,\n  count(names.births) as occurrence_count,\n  sum(names.births) as total_births,\n  total_births * 100 / sum(names.births) by names.gender as percent_of_gender_total,\n  rank names.name over names.gender by total_births desc as common_name_rank,\n  rank names.name over names.gender by total_births asc as unique_name_rank\norder by\n  common_name_rank asc,\n  unique_name_rank asc\nlimit 100\n",
      "latency": 17037
    },
    {
      "testId": "test-basic-query",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "where names.year between 1980 and 1989\n  and names.state in ('TX', 'LA', 'MS', 'AL', 'GA', 'FL', 'SC', 'NC', 'TN', 'KY', 'VA', 'AR')\nselect\n  names.name,\n  names.gender,\n  sum(names.births) as total_births,\n  count(names.state) as states_appeared_in,\n  count(names.year) as years_appeared_in\nhaving\n  total_births > 0\norder by\n  total_births asc, states_appeared_in asc, years_appeared_in asc\nlimit 20;",
      "latency": 8612
    },
    {
      "testId": "test-star-wars",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nwhere names.name in ('Luke', 'Leia', 'Han', 'Anakin', 'Kylo', 'Rey', 'Padme', 'Finn', 'Poe')\nselect\n    names.name,\n    names.year,\n    names.gender,\n    sum(names.births) as total_births\nhaving\n    total_births > 0\norder by\n    names.name asc,\n    names.year asc\nlimit 1000\n",
      "latency": 19374
    },
    {
      "testId": "test-star-wars",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nwhere names.year between 1970 and 1983\nselect\n  names.name,\n  names.gender,\n  names.year,\n  sum(names.births) as total_births,\n  sum(names.births ? names.year < 1977) as pre_star_wars_births,\n  sum(names.births ? names.year >= 1977) as post_star_wars_births,\n  (post_star_wars_births - pre_star_wars_births) / nullif(pre_star_wars_births, 0) as percent_change\nwhere\n  names.name in ('Luke', 'Leia', 'Han', 'Anakin', 'Lando', 'Vader', 'Obi', 'Ben', 'Yoda')\norder by\n  percent_change desc\nlimit 20;\n",
      "latency": 6071
    },
    {
      "testId": "test-star-wars",
      "passed": false,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nwhere names.year between 1970 and 1985\nselect\n  names.name,\n  names.year,\n  sum(names.births) as total_births\nwhere names.name in ('Luke', 'Leia', 'Han', 'Anakin', 'Lando')\norder by\n  names.name,\n  names.year\nlimit 100;\n",
      "latency": 16009
    },
    {
      "testId": "test-star-wars",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nwhere names.year between 1970 and 2010\nselect\n  names.name,\n  names.year,\n  sum(names.births) as total_births,\n  sum(names.births ? names.year < 1977) as pre_star_wars_births,\n  sum(names.births ? names.year >= 1977) as post_star_wars_births,\n  (post_star_wars_births - pre_star_wars_births) / nullif(pre_star_wars_births, 0) as percent_change\nwhere\n  names.name in ('Luke', 'Leia', 'Han', 'Anakin', 'Lando', 'Kylo', 'Rey', 'Padme')\n  or names.name like '%Vader%'\n  or names.name like '%Skywalker%'\norder by\n  percent_change desc,\n  post_star_wars_births desc\nlimit 20;\n",
      "latency": 6264
    },
    {
      "testId": "test-star-wars",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nwhere names.year between 1970 and 1985\nselect\n  names.year,\n  names.name,\n  sum(names.births) as total_births,\n  sum(names.births ? names.name = 'Luke') as luke_births,\n  sum(names.births ? names.name = 'Leia') as leia_births,\n  sum(names.births ? names.name = 'Han') as han_births,\n  sum(names.births ? names.name = 'Lando') as lando_births,\n  sum(names.births ? names.name = 'Anakin') as anakin_births\nhaving\n  names.name in ('Luke', 'Leia', 'Han', 'Lando', 'Anakin')\norder by\n  names.year asc,\n  total_births desc\nlimit 100;\n",
      "latency": 5157
    },
    {
      "testId": "test-abstract-question",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nselect\n  game_tall.team.color,\n  count(game_tall.id) as games_played,\n  sum(game_tall.win) as games_won,\n  sum(game_tall.win) / count(game_tall.id) as win_percentage\norder by\n  win_percentage desc\nlimit 20;\n",
      "latency": 5177
    },
    {
      "testId": "test-abstract-question",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nselect\n    case \n        when lower(game_tall.team.color) like '%f00%' or \n             lower(game_tall.team.color) like '%ff0000%' or \n             lower(game_tall.team.color) like '%000%' or \n             lower(game_tall.team.color) like '%000000%' \n        then 'Aggressive (Red/Black)' \n        else 'Non-Aggressive' \n    end as color_type,\n    count(game_tall.id) as total_games,\n    sum(game_tall.win) as total_wins,\n    sum(game_tall.win) / count(game_tall.id) * 100 as win_percentage\norder by\n    win_percentage desc\nlimit 10;\n",
      "latency": 9355
    },
    {
      "testId": "test-abstract-question",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nselect\n    case \n        when game_tall.team.color like '#f%' or game_tall.team.color like '#e%' or game_tall.team.color like '#c%' then 'Red/Aggressive'\n        when game_tall.team.color like '#0%' or game_tall.team.color like '#1%' or game_tall.team.color like '#2%' then 'Dark/Aggressive'\n        else 'Other colors'\n    end as color_category,\n    count(game_tall.id) as total_games,\n    sum(game_tall.win) as total_wins,\n    sum(game_tall.win) / count(game_tall.id) as win_percentage\norder by\n    win_percentage desc\nlimit 10;\n",
      "latency": 16376
    },
    {
      "testId": "test-abstract-question",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nselect\n  game_tall.team.color,\n  count(game_tall.id) as total_games,\n  sum(game_tall.win) as total_wins,\n  sum(game_tall.win) / count(game_tall.id) * 100 as win_percentage\norder by\n  win_percentage desc\nlimit 20\n",
      "latency": 7000
    },
    {
      "testId": "test-abstract-question",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nselect\n  case\n    when lower(game_tall.team.color) like '%f%0%0%' or lower(game_tall.team.color) like '%0%0%0%' then 'Aggressive (Red/Black)'\n    else 'Other'\n  end as color_category,\n  count(game_tall.id) as total_games,\n  sum(game_tall.win) as games_won,\n  sum(game_tall.win) / count(game_tall.id) as win_percentage\norder by\n  win_percentage desc\nlimit 10;\n",
      "latency": 8789
    },
    {
      "testId": "test-home-vs-away",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nselect\n  game_tall.team.name,\n  sum(game_tall.win ? game_tall.is_home = true) as home_wins,\n  count(game_tall.id ? game_tall.is_home = true) as home_games,\n  sum(game_tall.win ? game_tall.is_home = false) as away_wins,\n  count(game_tall.id ? game_tall.is_home = false) as away_games,\n  home_wins / home_games as home_win_rate,\n  away_wins / away_games as away_win_rate,\n  abs(home_win_rate - away_win_rate) as win_rate_difference\nhaving\n  home_games > 10 and away_games > 10\norder by\n  win_rate_difference desc\nlimit 10\n",
      "latency": 33837
    },
    {
      "testId": "test-home-vs-away",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nselect\n  game_tall.team_name,\n  avg(game_tall.win ? game_tall.is_home = true) as home_win_rate,\n  avg(game_tall.win ? game_tall.is_home = false) as away_win_rate,\n  avg(game_tall.win ? game_tall.is_home = true) - avg(game_tall.win ? game_tall.is_home = false) as win_rate_difference,\n  count(game_tall.id ? game_tall.is_home = true) as home_games,\n  count(game_tall.id ? game_tall.is_home = false) as away_games\norder by \n  win_rate_difference desc\nlimit 10\n",
      "latency": 23733
    },
    {
      "testId": "test-home-vs-away",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nSELECT\n  game_tall.team_name,\n  avg(game_tall.win ? game_tall.is_home = true) AS home_win_rate,\n  avg(game_tall.win ? game_tall.is_home = false) AS away_win_rate,\n  abs(avg(game_tall.win ? game_tall.is_home = true) - avg(game_tall.win ? game_tall.is_home = false)) AS win_rate_difference\nORDER BY\n  win_rate_difference DESC\nLIMIT 10\n",
      "latency": 6740
    },
    {
      "testId": "test-home-vs-away",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nselect\n    game_tall.team_name,\n    avg(game_tall.win ? game_tall.is_home = true) as home_win_rate,\n    avg(game_tall.win ? game_tall.is_home = false) as away_win_rate,\n    avg(game_tall.win ? game_tall.is_home = true) - avg(game_tall.win ? game_tall.is_home = false) as win_rate_difference,\n    count(game_tall.id ? game_tall.is_home = true) as home_games,\n    count(game_tall.id ? game_tall.is_home = false) as away_games\norder by\n    win_rate_difference desc\nlimit 10\n",
      "latency": 24075
    },
    {
      "testId": "test-home-vs-away",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "\nselect\n    game_tall.team_name,\n    count(game_tall.id ? game_tall.is_home = true) as home_games,\n    count(game_tall.id ? game_tall.is_home = false) as away_games,\n    sum(game_tall.win ? game_tall.is_home = true) / home_games as home_win_rate,\n    sum(game_tall.win ? game_tall.is_home = false) / away_games as away_win_rate,\n    home_win_rate - away_win_rate as win_rate_difference\nhaving\n    home_games >= 10 and\n    away_games >= 10\norder by\n    win_rate_difference desc\nlimit 10;\n",
      "latency": 20993
    }
  ],
  "passRate": 0.9,
  "averageLatency": 14066.6
}