{
  "provider": "OPENAI",
  "model": "gpt-4.1-nano",
  "results": [
    {
      "testId": "test-basic-query",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": " \nwhere names.state in ('AL', 'AR', 'FL', 'GA', 'KY', 'LA', 'MS', 'NC', 'SC', 'TN', 'TX', 'VA', 'WV') \nand names.year between 1980 and 1989\nselect\n    names.name,\n    sum(names.births) as total_births,\n    case \n        when sum(names.births) = 1 then 'unique'\n        when sum(names.births) > 10 then 'common'\n        else 'rare'\n    end as name_frequency_category\norder by total_births desc;\n",
      "latency": 1828
    },
    {
      "testId": "test-basic-query",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": " \nwhere\n    names.state in ('TX', 'FL', 'GA', 'AL', 'MS', 'LA', 'SC', 'NC', 'TN', 'AR', 'KY', 'OK', 'WV', 'VA')\n    and names.year between 1980 and 1989\nselect\n    names.name,\n    sum(names.births) as total_births,\n    case\n        when sum(names.births) = 1 then 'unique'\n        when sum(names.births) > 50 then 'common'\n        else 'rare'\n    end as name_category\norder by total_births desc;\n",
      "latency": 1566
    },
    {
      "testId": "test-basic-query",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": " \nwhere\n    names.year between 1980 and 1989\n    and names.state in ('TX', 'FL', 'GA', 'AL', 'MS', 'LA', 'SC', 'NC', 'TN', 'AR', 'OK', 'KY', 'WV', 'VA', 'DE')\nselect\n    names.name,\n    sum(names.births) as total_occurrences\norder by total_occurrences asc;\n",
      "latency": 3376
    },
    {
      "testId": "test-basic-query",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": " \nwhere names.state in ('AL', 'AZ', 'AR', 'LA', 'MS', 'OK', 'TX', 'GA', 'FL', 'NC', 'SC', 'TN', 'KY', 'WV', 'VA', 'MD', 'DE') \nand names.year between 1980 and 1989\nselect\n    names.name,\n    count(names.name) as name_occurrences\norder by name_occurrences asc\n",
      "latency": 2828
    },
    {
      "testId": "test-basic-query",
      "passed": false,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": "select\n    names.name,\n    count(names.name) as name_count\nwhere\n    names.state in ('TX', 'LA', 'MS', 'AL', 'GA', 'FL', 'SC', 'NC', 'TN', 'AR', 'OK', 'KY', 'WV', 'VA') and\n    names.year between 1980 and 1989\norder by\n    name_count desc;\" ",
      "latency": 5527
    },
    {
      "testId": "test-abstract-question",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": " \nselect \n    game_tall.team.color as team_color, \n    sum(game_tall.wins) as total_wins\norder by total_wins desc;\n",
      "latency": 1164
    },
    {
      "testId": "test-abstract-question",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": " \nselect\n    game_tall.team.color as team_color,\n    sum(game_tall.wins) as total_wins\norder by total_wins desc;\n",
      "latency": 1252
    },
    {
      "testId": "test-abstract-question",
      "passed": false,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": " \nwhere \n    contains(lower(team_color), 'red') or contains(lower(team_color), 'black')\nselect\n    lower(team_color) as team_color_lower,\n    sum(wins) as total_wins\ngroup by\n    lower(team_color)\norder by\n    total_wins desc;\n",
      "latency": 6321
    },
    {
      "testId": "test-abstract-question",
      "passed": false,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": " \nselect\n    case when lower(game_tall.team.color) like '%red%' or lower(game_tall.team.color) like '%black%' or lower(game_tall.team.color) like '%dark%' then 'Aggressive' else 'Non-Aggressive' end as color_category,\n    sum(game_tall.wins) as total_wins\ngroup by color_category\norder by total_wins desc;\n",
      "latency": 5007
    },
    {
      "testId": "test-abstract-question",
      "passed": true,
      "containedKeywords": [],
      "missingKeywords": [],
      "response": " \nselect\n    game_tall.team.color as team_color,\n    sum(game_tall.wins) as total_wins\norder by total_wins desc;\n",
      "latency": 1719
    }
  ],
  "passRate": 0.7,
  "averageLatency": 3058.8
}